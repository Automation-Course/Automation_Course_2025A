// controlling led with LDR 
#define LdrPin A0 // the cell and 10K pulldown are connected to A0 
int LdrValue = 0; // the analog reading from the sensor divider
#define LedPin 11 // connect Red LED to pin 11 (PWM pin)
int LedBrightness;
#define inPin 7 

#include <LiquidCrystal_I2C.h>
int seconds = 0;
LiquidCrystal_I2C lcd_1(0x27,16,2);

#include <Servo.h>
#define servoPin 9
Servo servo;
int angle = 0;
bool Direction = true;

#define gasSensorPin A1
const int threshold = 200;
// For piezo (Buzzer):
int buzzer = 2;

// for ultraSonic
int trigPin = 6;
int echoPin = 5;

// for distance
long duration, distance;
int gasValue;

void setup() {
  pinMode(inPin, INPUT);
  pinMode(LdrPin, INPUT);
  pinMode(LedPin, OUTPUT);
  pinMode(trigPin, OUTPUT);
  pinMode(echoPin, INPUT);
  Serial.begin(9600);
  servo.attach(servoPin);
  pinMode(gasSensorPin, INPUT);
  pinMode(buzzer, OUTPUT);
}
int buttonState = 0;     // Current state of the button
int lastButtonState = 0; // Previous state of the button
bool isActivated = false; // Toggle state (true = activated, false = deactivated)

void loop() {
  tone(buzzer,0); // alarm
  // Read the current state of the button
  buttonState = digitalRead(inPin);
  
  // if button was pressed once we want to make sure it stays pressed

  // Check for a state change (LOW to HIGH)
  if (buttonState == HIGH && lastButtonState == LOW) {
    isActivated = !isActivated; // Toggle the state - changing to True
    delay(50); // Debounce delay to avoid multiple toggles from a single press
  }
  
  lastButtonState = buttonState; // Update the last state

  if (isActivated) {
    int gasValue = analogRead(gasSensorPin);
    UltraSonic();
    Distance_Calculation();

    if (distance < 200) {
      lcd();
      lightSensor();
      servo1();
      GasSensor(gasValue, threshold);

    } else {
      return_normal();
    }
  } else {
    //return_normal(); // Reset or deactivate system when toggled off
  }
}

void return_normal() {
  servo.write(90); // Servo back to place
  lcd_1.clear();
  noTone(buzzer);
}

void UltraSonic() {
    // Clears the trigPin condition
    digitalWrite(trigPin, LOW);
    delayMicroseconds(2);
    // Sets the trigPin HIGH (ACTIVE) for 10 microseconds
    digitalWrite(trigPin, HIGH);
    delayMicroseconds(10);
    digitalWrite(trigPin, LOW);
}

void Distance_Calculation(){
    // Reads the echoPin, returns the sound wave travel time in microseconds
    duration = pulseIn(echoPin, HIGH);
    // Calculating the distance
    distance = duration * 0.034 / 2 ;// Speed of sound wave divided by 2 (go and back)
    Serial.println("distance: ");
    Serial.println(distance);

}

void lightSensor() {
  LdrValue = analogRead(LdrPin);
  Serial.print("LDR reading = ");
  Serial.println(LdrValue); // the raw analog reading
  LedBrightness = map(LdrValue, 679, 6, 0, 255);
  Serial.println("LedBrightness ="); // the raw analog reading
  Serial.println(LedBrightness); // the raw analog reading
  analogWrite(LedPin, LedBrightness);
  delay(15);
}

// lcd print
void lcd() {
  lcd_1.init();
  lcd_1.clear();
  lcd_1.print("Enjoy your meal! G7");
  lcd_1.setBacklight(1);
  delay(5000);
  lcd_1.clear();
  lcd_1.setBacklight(0);
  delay(100);
}
//servo movement
void servo1() {
    if (Direction){
        angle +=180;
    }else{
        angle -=180;
    }
    servo.write(angle);
    delay(15);
    if(angle == 180)Direction = false;
    if(angle == 0)Direction = true;
}

void lcdAlarm() {
  lcd_1.print("Gas Alarm !!!");
  lcd_1.setBacklight(1);
  delay(5000);
  lcd_1.setBacklight(0);
  delay(15);
}

void GasSensor(int gasValue,int threshold){
    if (gasValue < threshold) {
        Serial.println("Low Gas Value: ");
        Serial.println(gasValue);
        noTone(buzzer);
    }
    if (gasValue > threshold){
        analogWrite(LedPin, 255);
        Serial.println("High Gas Value: ");
        Serial.println(gasValue);
        tone(buzzer,10); // alarm
        lcdAlarm();

    }
}
